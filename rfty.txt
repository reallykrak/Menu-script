--==============================================================================
-- STEP 1: LOAD RAYFIELD LIBRARY
-- This line must always be at the very top.
--==============================================================================
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--==============================================================================
-- CORE VARIABLES & SERVICES
--==============================================================================
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer
local mouse = localPlayer:GetMouse()
local camera = Workspace.CurrentCamera

-- Global Toggles & Settings
local Toggles = {
    Fly = false,
    ESP = false,
    Aimbot = false,
    ShowFov = false
}
local AimbotSettings = {
    TargetPart = "Head",
    FOV = 100,
    AimKey = Enum.KeyCode.E 
}
local Connections = {} -- Store all active connections here for easy management

--==============================================================================
-- CREATE THE RAYFIELD WINDOW
--==============================================================================

local Window = Rayfield:CreateWindow({
    Name = "Stark's Command Center v3.0",
    LoadingTitle = "Loading Protocols...",
    LoadingSubtitle = "By Stark's Command",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "StarkConfigV3",
        FileName = "Main"
    }
})

--==============================================================================
-- MOVEMENT TAB
--==============================================================================

local MovementTab = Window:CreateTab("Movement", 4483362458)

-- === Flight Controls Section ===
local FlightSection = MovementTab:CreateSection("Flight Controls")

local fly_speed = 100
local fly_bv, fly_bg
local flyLoopActive = false

FlightSection:CreateToggle({
    Name = "Enable Flawless Flight",
    Callback = function(state)
        Toggles.Fly = state
        local char = localPlayer.Character
        if not char then return end

        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end

        local targetPart = (humanoid.RigType == Enum.HumanoidRigType.R15 and char:FindFirstChild("UpperTorso")) or char:FindFirstChild("Torso")
        if not targetPart then return end

        if Toggles.Fly then
            flyLoopActive = true
            
            fly_bg = Instance.new("BodyGyro", targetPart)
            fly_bg.P = 9e4
            fly_bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
            fly_bg.CFrame = targetPart.CFrame

            fly_bv = Instance.new("BodyVelocity", targetPart)
            fly_bv.Velocity = Vector3.new(0, 0, 0)
            fly_bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)

            humanoid.PlatformStand = true
            
            if Connections.FlyLoop then Connections.FlyLoop:Disconnect() end
            Connections.FlyLoop = RunService.RenderStepped:Connect(function()
                if not flyLoopActive or not fly_bv or not fly_bv.Parent then return end
                
                local moveVector = Vector3.new()
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveVector = moveVector + Vector3.new(0, 0, -1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveVector = moveVector + Vector3.new(0, 0, 1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveVector = moveVector + Vector3.new(-1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveVector = moveVector + Vector3.new(1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveVector = moveVector + Vector3.new(0, 1, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then moveVector = moveVector + Vector3.new(0, -1, 0) end
                
                local relativeMoveVector = camera.CFrame:VectorToWorldSpace(moveVector.Unit)
                fly_bv.Velocity = relativeMoveVector * fly_speed
                if fly_bg and fly_bg.Parent then fly_bg.CFrame = camera.CFrame end
            end)

        else
            flyLoopActive = false
            if Connections.FlyLoop then Connections.FlyLoop:Disconnect(); Connections.FlyLoop = nil end
            if fly_bg then fly_bg:Destroy() end
            if fly_bv then fly_bv:Destroy() end
            if humanoid then humanoid.PlatformStand = false end
        end
    end
})

FlightSection:CreateSlider({
    Name = "Flight Speed",
    Range = {50, 2000},
    Increment = 25,
    Suffix = " Speed",
    Default = 100,
    Callback = function(value)
        fly_speed = value
    end
})

-- === Other Movement Abilities Section ===
local OtherMovementSection = MovementTab:CreateSection("Other Movement Abilities")

local originalWalkSpeed, originalJumpPower = 16, 50
local function saveOriginals(humanoid)
    originalWalkSpeed = humanoid.WalkSpeed
    originalJumpPower = humanoid.JumpPower
end
if localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
    saveOriginals(localPlayer.Character.Humanoid)
end
localPlayer.CharacterAdded:Connect(function(char)
    local humanoid = char:WaitForChild("Humanoid")
    saveOriginals(humanoid)
end)

OtherMovementSection:CreateToggle({
    Name = "Infinite Jump",
    Callback = function(state)
        if state then
            Connections.InfiniteJump = UserInputService.JumpRequest:Connect(function()
                if localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
                    localPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        elseif Connections.InfiniteJump then
            Connections.InfiniteJump:Disconnect(); Connections.InfiniteJump = nil
        end
    end
})

local jumpPowerValue = 150
OtherMovementSection:CreateToggle({
    Name = "Jump Boost",
    Callback = function(state)
        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        humanoid.JumpPower = state and jumpPowerValue or originalJumpPower
    end
})
OtherMovementSection:CreateSlider({
    Name = "Jump Power Value",
    Range = {50, 500}, Increment = 10, Suffix = " Power", Default = 150,
    Callback = function(value)
        jumpPowerValue = value
        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.JumpPower ~= originalJumpPower then humanoid.JumpPower = value end
    end,
})

local walkSpeedValue = 100
OtherMovementSection:CreateToggle({
    Name = "Speed Boost",
    Callback = function(state)
        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        humanoid.WalkSpeed = state and walkSpeedValue or originalWalkSpeed
    end
})
OtherMovementSection:CreateSlider({
    Name = "Walk Speed Value",
    Range = {16, 300}, Increment = 5, Suffix = " Speed", Default = 100,
    Callback = function(value)
        walkSpeedValue = value
        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.WalkSpeed ~= originalWalkSpeed then humanoid.WalkSpeed = value end
    end,
})

--==============================================================================
-- VISUALS (ESP) TAB
--==============================================================================

local VisualsTab = Window:CreateTab("Visuals", 4483362458)
local ESPSection = VisualsTab:CreateSection("Player ESP Settings")

local ESPConfig = { Box = true, Name = true, Distance = true }

VisualsTab:CreateToggle({
    Name = "Enable ESP",
    Callback = function(state) Toggles.ESP = state end
})

ESPSection:CreateToggle({ Name = "Box ESP", Default = true, Callback = function(state) ESPConfig.Box = state end })
ESPSection:CreateToggle({ Name = "Name ESP", Default = true, Callback = function(state) ESPConfig.Name = state end })
ESPSection:CreateToggle({ Name = "Distance ESP", Default = true, Callback = function(state) ESPConfig.Distance = state end })

local function updateESP()
    for _, espElement in pairs(CollectionService:GetTagged("StarkESP")) do espElement:Destroy() end
    if not Toggles.ESP then return end
    
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= localPlayer and otherPlayer.Character then
            local char, humanoid, head = otherPlayer.Character, otherPlayer.Character:FindFirstChildOfClass("Humanoid"), otherPlayer.Character:FindFirstChild("Head")
            if humanoid and humanoid.Health > 0 and head then
                local billboardGui = Instance.new("BillboardGui", game.CoreGui)
                billboardGui.Name = "ESP_GUI"
                billboardGui.Adornee = head
                billboardGui.AlwaysOnTop = true
                billboardGui.Size = UDim2.new(4, 0, 4, 0)
                billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                CollectionService:AddTag(billboardGui, "StarkESP")

                if ESPConfig.Box then
                    local box = Instance.new("Frame", billboardGui)
                    box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    box.BackgroundTransparency = 1
                    box.BorderColor3 = otherPlayer.Team and otherPlayer.Team.TeamColor.Color or Color3.new(1,0,0)
                    box.BorderSizePixel = 2
                    box.Size = UDim2.new(1, 0, 1, 0)
                    box.Position = UDim2.new(-0.5, 0, -0.5, 0)
                end
                
                local textContent = {}
                if ESPConfig.Name then table.insert(textContent, otherPlayer.Name) end
                if ESPConfig.Distance and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (localPlayer.Character.HumanoidRootPart.Position - head.Position).Magnitude
                    table.insert(textContent, string.format("[%dM]", distance))
                end

                if #textContent > 0 then
                    local label = Instance.new("TextLabel", billboardGui)
                    label.BackgroundColor3 = Color3.new(0,0,0)
                    label.BackgroundTransparency = 0.4
                    label.Size = UDim2.new(5, 0, 1, 0)
                    label.Position = UDim2.new(-2.5, 0, -1.5, 0)
                    label.Font, label.TextColor3, label.TextSize, label.TextScaled = Enum.Font.SourceSans, Color3.new(1,1,1), 14, true
                    label.Text = table.concat(textContent, " ")
                end
            end
        end
    end
end
RunService.RenderStepped:Connect(updateESP)

--==============================================================================
-- AIMBOT TAB
--==============================================================================
local AimbotTab = Window:CreateTab("Aimbot", 4483362458)
local AimbotSection = AimbotTab:CreateSection("Aimbot Settings")

AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    Callback = function(state) Toggles.Aimbot = state end
})

AimbotSection:CreateToggle({
    Name = "Show FOV Circle",
    Default = false,
    Callback = function(state) Toggles.ShowFov = state end
})

AimbotSection:CreateSlider({
    Name = "FOV Radius",
    Range = {10, 500}, Increment = 10, Suffix = "px", Default = 100,
    Callback = function(value) AimbotSettings.FOV = value end
})

AimbotSection:CreateDropdown({
    Name = "Target Part",
    Options = {"Head", "HumanoidRootPart"},
    Default = "Head",
    Callback = function(option) AimbotSettings.TargetPart = option end
})

AimbotSection:CreateKeybind({
    Name = "Aim Key",
    Default = Enum.KeyCode.E,
    Callback = function(key) AimbotSettings.AimKey = key end
})

-- FOV Circle GUI
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = AimbotSettings.FOV
FOVCircle.Color = Color3.new(1,1,1)
FOVCircle.Thickness = 1
FOVCircle.Filled = false

local function getBestTarget()
    local bestTarget, minDistance = nil, math.huge
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= localPlayer and otherPlayer.Character and otherPlayer.Team ~= localPlayer.Team then
            local char = otherPlayer.Character
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            local targetPart = char:FindFirstChild(AimbotSettings.TargetPart)

            if humanoid and humanoid.Health > 0 and targetPart then
                local screenPos, onScreen = camera:WorldToScreenPoint(targetPart.Position)
                if onScreen then
                    local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < AimbotSettings.FOV and distance < minDistance then
                        local ray = Ray.new(camera.CFrame.Position, (targetPart.Position - camera.CFrame.Position).unit * 1000)
                        local hit = Workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character})
                        if hit and hit:IsDescendantOf(char) then
                           minDistance = distance
                           bestTarget = targetPart
                        end
                    end
                end
            end
        end
    end
    return bestTarget
end

RunService.RenderStepped:Connect(function()
    FOVCircle.Visible = Toggles.Aimbot and Toggles.ShowFov
    if FOVCircle.Visible then
        FOVCircle.Position = Vector2.new(mouse.X, mouse.Y)
        FOVCircle.Radius = AimbotSettings.FOV
    end

    if Toggles.Aimbot and UserInputService:IsKeyDown(AimbotSettings.AimKey) then
        local target = getBestTarget()
        if target then
            camera.CFrame = CFrame.new(camera.CFrame.Position, target.Position)
        end
    end
end)

--==============================================================================
-- SETTINGS TAB (IMGUI/THEME)
--==============================================================================
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local ThemeSection = SettingsTab:CreateSection("Menu Theme")

local accentColor = {r = 1, g = 0.5, b = 0} -- Default Orange

local function updateTheme()
    Window:SetAccent(Color3.fromHSV(accentColor.r, accentColor.g, accentColor.b))
end

ThemeSection:CreateSlider({
    Name = "Theme Hue",
    Range = {0, 1}, Increment = 0.01, Default = 0.08,
    Callback = function(value) accentColor.r = value; updateTheme() end
})
ThemeSection:CreateSlider({
    Name = "Theme Saturation",
    Range = {0, 1}, Increment = 0.01, Default = 1,
    Callback = function(value) accentColor.g = value; updateTheme() end
})
ThemeSection:CreateSlider({
    Name = "Theme Value",
    Range = {0, 1}, Increment = 0.01, Default = 1,
    Callback = function(value) accentColor.b = value; updateTheme() end
})