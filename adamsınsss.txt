local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Fly Menu by reallykrak & Kayra", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local MainTab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local FlySection = MainTab:AddSection({
	Name = "Fly Ayarları"
})

local speeds = 1
local nowe = false
local tpwalking = false
local flyEnabled = false

local function updateFlyState()
    local speaker = game:GetService("Players").LocalPlayer
    local chr = speaker.Character
    if not chr then return end
    local hum = chr:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    if flyEnabled then
        nowe = true
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "reallykrak & Kayra",
            Text = "Fly AÇIK!",
            Duration = 3
        })

        for i, v in next, hum:GetPlayingAnimationTracks() do
            v:AdjustSpeed(0)
        end
        hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Running, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        hum:ChangeState(Enum.HumanoidStateType.Swimming)

        for i = 1, speeds do
            spawn(function()
                local hb = game:GetService("RunService").Heartbeat
                tpwalking = true
                while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                    if hum.MoveDirection.Magnitude > 0 then
                        chr:TranslateBy(hum.MoveDirection * speeds)
                    end
                end
            end)
        end

        local bodyPart = chr:FindFirstChild("UpperTorso") or chr:FindFirstChild("Torso")
        if not bodyPart then return end

        local bg = Instance.new("BodyGyro", bodyPart)
        bg.P = 9e4
        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        bg.cframe = bodyPart.CFrame
        local bv = Instance.new("BodyVelocity", bodyPart)
        bv.velocity = Vector3.new(0, 0.1, 0)
        bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
        hum.PlatformStand = true

        spawn(function()
            while flyEnabled and chr and hum and hum.Health > 0 do
                game:GetService("RunService").RenderStepped:Wait()
                bv.velocity = (game.Workspace.CurrentCamera.CoordinateFrame.lookVector * speeds)
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame
            end
            bg:Destroy()
            bv:Destroy()
            hum.PlatformStand = false
        end)

    else
        nowe = false
        tpwalking = false
        hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Running, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
        hum:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
        hum:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "reallykrak & Kayra",
            Text = "Fly KAPALI!",
            Duration = 3
        })
    end
end

MainTab:AddToggle({
	Name = "Fly'ı Aktif Et",
	Callback = function(Value)
		flyEnabled = Value
		updateFlyState()
	end    
})

MainTab:AddSlider({
	Name = "Uçuş Hızı",
	Min = 1,
	Max = 100,
	Default = 1,
	Color = Color3.fromRGB(255,85,0),
	Increment = 1,
	ValueName = "Hız",
	Callback = function(Value)
		speeds = Value
		OrionLib:MakeNotification({
			Name = "Hız Değişti!",
			Content = "Yeni uçuş hızı: " .. tostring(speeds),
			Image = "rbxassetid://4483345998",
			Time = 5
		})
	end
})

OrionLib:Init()

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
    wait(1)
    if flyEnabled then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.PlatformStand = false
        end
        -- Re-apply fly state on respawn if it was active
        updateFlyState()
    end
end)