-- Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()

-- Main Window
local Window = OrionLib:MakeWindow({Name = "Nurons Krak", HidePremium = false, SaveConfig = true, ConfigFolder = "NuronsKrakConfig"})

-- Fly Tab
local FlyTab = Window:MakeTab({
	Name = "Fly",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

-- Fly Section
local FlySection = FlyTab:AddSection({
	Name = "Fly Settings"
})

-- Variables
local flySpeed = 1
local tpwalking = false
local flyEnabled = false
local infiniteJumpEnabled = false
local speedEnabled = false
local speedAmount = 16 -- Roblox default speed
local jumpBoostEnabled = false
local jumpBoostAmount = 50 -- Roblox default jump power

local player = game:GetService("Players").LocalPlayer

-- Original Fly Function (Untouched Logic)
local function updateFlyState()
    local speaker = game:GetService("Players").LocalPlayer
    local chr = speaker.Character
    if not chr then return end
    local hum = chr:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    if flyEnabled then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Nurons Krak",
            Text = "Fly ENABLED!",
            Duration = 3
        [cite_start]}) -- [cite: 2]

        for i, v in next, hum:GetPlayingAnimationTracks() do
            v:AdjustSpeed(0)
        [cite_start]end -- [cite: 2, 3]
        
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Flying, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Landed, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Physics, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false) -- [cite: 3]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Running, false) -- [cite: 4]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false) -- [cite: 4]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Seated, false) -- [cite: 4]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false) -- [cite: 4]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Swimming, false) -- [cite: 4]
        [cite_start]hum:ChangeState(Enum.HumanoidStateType.Swimming) -- [cite: 4]

        spawn(function()
            local hb = game:GetService("RunService").Heartbeat
            [cite_start]tpwalking = true -- [cite: 5]
            while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                if hum.MoveDirection.Magnitude > 0 then
                    chr:TranslateBy(hum.MoveDirection * flySpeed)
                [cite_start]end -- [cite: 5, 6]
            end
        end)

        local bodyPart = chr:FindFirstChild("UpperTorso") or chr:FindFirstChild("Torso")
        if not bodyPart then return end

        local bg = Instance.new("BodyGyro", bodyPart)
        bg.P = 9e4
        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        [cite_start]bg.cframe = bodyPart.CFrame -- [cite: 7]
        local bv = Instance.new("BodyVelocity", bodyPart)
        bv.velocity = Vector3.new(0, 0.1, 0)
        [cite_start]bv.maxForce = Vector3.new(9e9, 9e9, 9e9) -- [cite: 7]
        [cite_start]hum.PlatformStand = true -- [cite: 7]

        spawn(function()
            while flyEnabled and chr and hum and hum.Health > 0 do
                [cite_start]game:GetService("RunService").RenderStepped:Wait() -- [cite: 8]
                bv.velocity = (game.Workspace.CurrentCamera.CoordinateFrame.lookVector * flySpeed)
                [cite_start]bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame -- [cite: 8]
            end
            bg:Destroy()
            bv:Destroy()
            hum.PlatformStand = false
        end)
    else
        [cite_start]tpwalking = false -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Flying, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Freefall, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Landed, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Physics, true) -- [cite: 9]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Running, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Seated, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true) -- [cite: 10]
        [cite_start]hum:SetStateEnabled(Enum.HumanoidStateType.Swimming, true) -- [cite: 10]
        [cite_start]hum:ChangeState(Enum.HumanoidStateType.RunningNoPhysics) -- [cite: 10]
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Nurons Krak",
            [cite_start]Text = "Fly DISABLED!", -- [cite: 11]
            Duration = 3
        [cite_start]}) -- [cite: 10, 11]
    end
end

-- Infinite Jump Function
local function updateInfiniteJump()
    if infiniteJumpEnabled then
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if infiniteJumpEnabled and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end

-- Speed Function
local function updateSpeed()
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        humanoid.WalkSpeed = speedEnabled and speedAmount or 16
    end
end

-- Jump Boost Function
local function updateJumpBoost()
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        humanoid.JumpPower = jumpBoostEnabled and jumpBoostAmount or 50
    end
end


-- UI Toggles and Sliders
FlyTab:AddToggle({
	Name = "Activate Fly",
	Callback = function(Value)
		flyEnabled = Value
		updateFlyState()
	end    
})

FlyTab:AddSlider({
	Name = "Fly Speed",
	Min = 1,
	Max = 200,
	Default = 1,
	Color = Color3.fromRGB(255,85,0),
	Increment = 1,
	ValueName = "Speed",
	Callback = function(Value)
		flySpeed = Value
		OrionLib:MakeNotification({
			Name = "Speed Changed!",
			Content = "New fly speed: " .. tostring(flySpeed),
			Image = "rbxassetid://4483345998",
			Time = 5
		})
	end
})

FlyTab:AddToggle({
    Name = "Infinite Jump",
    Callback = function(Value)
        infiniteJumpEnabled = Value
        if Value then
            updateInfiniteJump()
        end
        OrionLib:MakeNotification({
			Name = "Infinite Jump",
			Content = "Infinite Jump is now " .. (Value and "ENABLED" or "DISABLED"),
			Image = "rbxassetid://4483345998",
			Time = 3
		})
    end
})

FlyTab:AddToggle({
    Name = "Enable Speed",
    Callback = function(Value)
        speedEnabled = Value
        updateSpeed()
    end
})

FlyTab:AddSlider({
	Name = "Speed Amount",
	Min = 16,
	Max = 500,
	Default = 16,
	Color = Color3.fromRGB(0, 170, 255),
	Increment = 1,
	ValueName = "Amount",
	Callback = function(Value)
		speedAmount = Value
        if speedEnabled then
            updateSpeed()
        end
	end
})

FlyTab:AddToggle({
    Name = "Enable Jump Boost",
    Callback = function(Value)
        jumpBoostEnabled = Value
        updateJumpBoost()
    end
})

FlyTab:AddSlider({
	Name = "Jump Boost Amount",
	Min = 50,
	Max = 500,
	Default = 50,
	Color = Color3.fromRGB(85, 255, 127),
	Increment = 1,
	ValueName = "Amount",
	Callback = function(Value)
		jumpBoostAmount = Value
        if jumpBoostEnabled then
            updateJumpBoost()
        end
	end
})

OrionLib:Init()

player.CharacterAdded:Connect(function(char)
    wait(1)
    if flyEnabled then
        updateFlyState()
    end
    updateSpeed()
    updateJumpBoost()
end)